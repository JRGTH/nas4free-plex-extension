#!/bin/sh
# plexinit
# Created by: J.M Rivera (http://forums.nas4free.org/viewtopic.php?f=71&t=11184)
# Provide: Plex Media Server*
# Require: NAS4Free 10.3 and later version.
# *Plex(c) (Plex Media Server) is a registered trademark of Plex(c), Inc.

# Determine full working directory.
CWDIR=$(dirname $(realpath $0))

# Global variables.
PLATFORM=`uname -m`
PRODUCT=`uname -i`
PRDVERSION=`uname -r | cut -d '-' -f1 | tr -d '.'`
PRDPLATFORM=`cat /etc/platform`
SCRIPTNAME=`basename $0`
APPVERSION=`cat ${CWDIR}/version 2> /dev/null`
DATE=`date +"%a %b %d %T %Y"`
APPNAME="Plex Extension"
PKGCACHE="/var/cache/pkg"
PKGDB="/var/db/pkg"
PLEXCONFLINK="/var/etc/plexconf"
COMPATPATH1="/usr/local/lib/compat"
COMPATPATH2="/usr/local/lib32/compat"
COMPATPATH3="/usr/local/libdata/ldconfig"
COMPATPATH4="/usr/local/libdata/ldconfig32"
PLEXPATH="/usr/local/share/plexmediaserver"
PLEXRCD="/usr/local/etc/rc.d/plexmediaserver"
PLEXPID="/var/run/plex/plex.pid"
SUPPORTPATH="${CWDIR}/plexdata"
RCDPATH="/usr/local/etc/rc.d"
CONFIG="/cf/conf/config.xml"
FULLPRDNAME="Plex Media Server"
PRDNAME="plexmediaserver"
CMDNAME="plexmediaserver"
BRANCH="master"
GITURL="https://github.com/JRGTH/nas4free-plex-extension/archive/${BRANCH}.zip"
VERFILE="https://raw.githubusercontent.com/JRGTH/nas4free-plex-extension/${BRANCH}/plex/version"

error_notify()
{
	# Logg and notify message on error and exit.
	/usr/bin/logger "${SCRIPTNAME}: an error has occurred during initialize"
	echo -e "$*" >&2 ; exit 1
}

update_freebsdconf()
{
	# Replace old FreeBSD.conf to fetch latest packages.
	if [ -f /etc/pkg/FreeBSD.conf ]; then 
		if /bin/cat "/etc/pkg/FreeBSD.conf" | grep -q "quarterly"; then
			/usr/bin/sed -e "s=quarterly=latest=" /etc/pkg/FreeBSD.conf > /etc/pkg/FreeBSD.conf~
			/bin/mv /etc/pkg/FreeBSD.conf~ /etc/pkg/FreeBSD.conf || error_notify "Error: A problem has occurred while renaming conf file."
		fi
	fi
}

plex_initial_download()
{
	# Update FreeBSD.conf file.
	update_freebsdconf

	# Check if Plex already exist.
	if [ ! -f ${PLEXPATH}/Plex_Media_Server ]; then
		# Fetch and install latest plex package.
		pkg install -y ${PRDNAME}
		# Re-check if Plex diretory/application exist.
		if [ ! -f "${PLEXPATH}/Plex_Media_Server" ]; then
			error_notify "Error: A problem has occurred while fetching/locating plexmediaserver."
		fi
	fi

	# Create required directories.
	/bin/mkdir -p ${CWDIR}/conf
	/bin/mkdir -p ${CWDIR}/log

	# Backup latest plex rcd after install if embedded.
	if [ "${PRDPLATFORM}" == "x64-embedded" ]; then
		if [ -f ${PLEXRCD} ]; then
			/bin/cp ${PLEXRCD} ${CWDIR}/system/rc.d || error_notify "Error: A problem has occurred while copying rcd file."
		fi
	fi
}

pkg_upgrade()
{
	# Update FreeBSD.conf file.
	update_freebsdconf

	# Set plex current version variable.
	PLEXVERSION=`pkg info -I plexmediaserver | cut -d' ' -f1 | cut -d- -f2 | tr -d .`

	# Check for latest plex packages for upgrade.
	pkg upgrade -y ${PRDNAME}

	# Set plex new version variable.
	PLEXNEWVERSION=`pkg info -I plexmediaserver | cut -d' ' -f1 | cut -d- -f2 | tr -d .`

	# Logging and plex restart after upgrade.
	if [ "${PLEXNEWVERSION}" -gt "${PLEXVERSION}" ]; then
		PLEXNEWVER=`pkg info -I plexmediaserver | cut -d' ' -f1 | cut -d- -f2`
		echo "${DATE}: ${FULLPRDNAME} upgraded to ${PLEXNEWVER}" >> ${CWDIR}/log/plex_ext.log
		echo "==> ${FULLPRDNAME} package upgrade completed!"
		service ${CMDNAME} onerestart 2> /dev/null || ${PLEXRCD} onerestart
	fi

	# Backup latest plex rcd after upgrade if embedded.
	if [ "${PRDPLATFORM}" == "x64-embedded" ]; then
		if [ -f "${PLEXRCD}" ]; then
			/bin/cp ${PLEXRCD} ${CWDIR}/system/rc.d || error_notify "Error: A problem has occurred while copying plex rc file."
		fi
	fi

	# Check and upgrade extension package.
	if [ -f ${CWDIR}/version ]; then
		extension_upgrade
	else
		ext_initial_download
	fi
}

extension_upgrade()
{
	# Check if local .zip achive exist then auto-upgrade extension files, otherwise perform online upgrade.
	echo "==> Looking for new ${APPNAME} package!"
	if [ -f ${CWDIR}/*${BRANCH}.zip ]; then
		echo "==> New ${APPNAME} package found, performing upgrade..."
		/bin/mkdir -p ${CWDIR}/update
		/usr/bin/tar -xf ${CWDIR}/*${BRANCH}.zip --exclude='.git*' --strip-components 1 -C ${CWDIR}/update
		/bin/chmod +x ${CWDIR}/update/plex/plexinit
		/bin/cp -Rf ${CWDIR}/update/plex/* ${CWDIR}/
		/bin/rm -f ${CWDIR}/*${BRANCH}.zip
		/bin/rm -R ${CWDIR}/update
		update_guifiles
		# Logging the update event.
		UPDATEVERSION=`cat ${CWDIR}/version`
		echo "${DATE}: ${APPNAME} upgraded to ${UPDATEVERSION}" >> ${CWDIR}/log/plex_ext.log
		echo "==> ${APPNAME} package upgrade completed!"
	else
		# Perform an online extension upgrade.
		/bin/mkdir -p ${CWDIR}/update
		/usr/bin/fetch -ao ${CWDIR}/update --no-verify-peer --timeout=30 ${VERFILE} || error_notify "Error: A problem has occurred while fetching version file."
		# Compare version files and fetch latest package if available.
		if [ -f ${CWDIR}/update/version ]; then
			UPDATEVER=`cat ${CWDIR}/update/version | tr -d .`
			CURRENTVER=`cat ${CWDIR}/version | tr -d .`
			if [ "${UPDATEVER}" -gt "${CURRENTVER}" ]; then
				echo "==> New ${APPNAME} package found, performing upgrade..."
				/usr/bin/fetch -ao ${CWDIR}/update --no-verify-peer --timeout=30 ${GITURL} || error_notify "Error: A problem has occurred while fetching extension package."
				/usr/bin/tar -xf ${CWDIR}/update/*${BRANCH}.zip --exclude='.git*' --strip-components 1 -C ${CWDIR}/update
				/bin/chmod +x ${CWDIR}/update/plex/plexinit
				/bin/cp -Rf ${CWDIR}/update/plex/* ${CWDIR}/
				/bin/rm -R ${CWDIR}/update
				update_guifiles
				# Logging the update event.
				UPDATEVERSION=`cat ${CWDIR}/version`
				echo "${DATE}: ${APPNAME} upgraded to ${UPDATEVERSION}" >> ${CWDIR}/log/plex_ext.log
				echo "==> ${APPNAME} package upgrade completed!"
			else
				echo "==> No new ${APPNAME} package available!"
				/bin/rm -R ${CWDIR}/update
			fi
		fi
	fi
}

ext_initial_download()
{
	# Always ensure the version file is present, otherwise update the extension files on startup.
	if [ ! -f ${CWDIR}/version ]; then
		/bin/mkdir -p ${CWDIR}/update
		/usr/bin/fetch -ao ${CWDIR}/update --no-verify-peer --timeout=30 ${GITURL} || error_notify "Error: A problem has occurred while fetching extension package."
		/usr/bin/tar -xf ${CWDIR}/update/${BRANCH}.zip --exclude='.git*' --strip-components 1 -C ${CWDIR}/update
		/bin/chmod +x ${CWDIR}/update/plex/plexinit
		/bin/cp -Rf ${CWDIR}/update/plex/* ${CWDIR}/
		/bin/rm -R ${CWDIR}/update
	fi
}

update_guifiles()
{
	# Check if gui enabled then copy/overwrite new files to www.
	GUI_STATUS=`cat ${CWDIR}/conf/plex_config | grep 'GUI_ENABLE=' | cut -d'"' -f2`
	if [ "${GUI_STATUS}" == "YES" ]; then
		/bin/cp -R ${CWDIR}/gui/* /usr/local/www/ || error_notify "Error: A problem has occurred while copying extension gui files."
	fi
}

product_check()
{
	# Check for working product.
	if [ "${PRODUCT}" == "NAS4FREE-x64" ]; then
		postinit_cmd
		gui_start
	fi
}

platform_check()
{
	# Check for working platform.
	if [ "${PRDPLATFORM}" == "x64-embedded" ]; then
		pkg_symlinkdir
		compat_symlinkdir
		plex_symlinkdir
		plex_rcd_link
	fi
}

postinit_cmd()
{
	# Check and generate temporary php script for postinit command.
	if ! /usr/bin/grep -q ${CWDIR}/plexinit ${CONFIG}; then
		/usr/bin/touch ${CWDIR}/postinit || error_notify "Error: A problem has occurred while creating postinit file."
		/bin/chmod +x ${CWDIR}/postinit
		if [ ! "${PRDVERSION}" -ge "110" ]; then
			# Generate php script for NAS4Free 10.3 versions.
			/bin/cat << EOF > ${CWDIR}/postinit
<?php
require_once("config.inc");
require_once("functions.inc");
\$cmd = dirname(__FILE__)."/plexinit";
	\$i =0;
	if ( is_array(\$config['rc']['postinit'] ) && is_array( \$config['rc']['postinit']['cmd'] ) ) {
		for (\$i; \$i < count(\$config['rc']['postinit']['cmd']);) {
			if (preg_match('/plexinit/', \$config['rc']['postinit']['cmd'][\$i])) break; ++\$i; }
	}
	\$config['rc']['postinit']['cmd'][\$i] = \$config['cmd']."\$cmd";
	write_config();
?>
EOF
		else
			# Generate php script for NAS4Free 11.x versions.
			/bin/cat << EOF > ${CWDIR}/postinit
<?php
require_once("config.inc");
require_once("functions.inc");
\$cmd = dirname(__FILE__)."/plexinit";
\$name = "Plex Extension";
\$comment = "Plex Media Server";
\$rc = &array_make_branch(\$config,'rc','param'); 
if(false === array_search_ex(\$name,\$rc,'name')):
	\$rc_param = [];
	\$rc_param['uuid'] = uuid();
	\$rc_param['name'] = \$name;
	\$rc_param['value'] = \$cmd;
	\$rc_param['comment'] = \$comment;
	\$rc_param['typeid'] = '2';
	\$rc_param['enable'] = true;
	\$rc[] = \$rc_param;
	write_config();
endif;
unset(\$rc);
?>
EOF
		fi

		# Create conf directory if doesn't exist.
		if [ ! -d ${CWDIR}/conf ]; then
			/bin/mkdir -p ${CWDIR}/conf
		fi

		# Execute temporary php script.
		if [ "${OBI_INSTALL}" != "ON" ]; then
			/usr/local/bin/php-cgi -f ${CWDIR}/postinit && rm ${CWDIR}/postinit
			# To set enable for the gui because at the installation Plex is started by default.
			/usr/sbin/sysrc -f "${CWDIR}/conf/plex_config" PLEX_ENABLE=YES GUI_ENABLE=YES >/dev/null 2>&1
		else 
			# To set enable for the gui because at the installation Plex is started by default.
			/usr/sbin/sysrc -f "${CWDIR}/conf/plex_config" PLEX_ENABLE=YES GUI_ENABLE=YES >/dev/null 2>&1
		fi
	fi
}

gui_start()
{
	# Initialize the extension gui.
	if [ -d ${CWDIR}/gui ]; then
		# Always ensure the config directory/file exist.
		if [ ! -f ${CWDIR}/conf/plex_config ]; then
			# Restore default configuration.
			/bin/mkdir -p ${CWDIR}/conf
			/usr/sbin/sysrc -f "${CWDIR}/conf/plex_config" PLEX_ENABLE=YES GUI_ENABLE=YES >/dev/null 2>&1
		fi
		GUI_STATUS=`cat ${CWDIR}/conf/plex_config | grep 'GUI_ENABLE=' | cut -d'"' -f2`
		if [ "${GUI_STATUS}" == "YES" ]; then
			# Store the installation path and link conf.
			/usr/sbin/sysrc -f "${CWDIR}/conf/plex_config" INSTALL_DIR=${CWDIR} >/dev/null 2>&1
			/bin/mkdir -p ${PLEXCONFLINK}
			/bin/ln -Ffhs ${CWDIR}/conf ${PLEXCONFLINK}/
			# Copy the gui files.
			/bin/cp -R ${CWDIR}/gui/* /usr/local/www/ || error_notify "Error: A problem has occurred while copying extension files."
		fi
	fi
}

gui_enable()
{
	#  Relink conf and copy the gui files.
	if [ -d ${CWDIR}/gui ]; then
		/bin/mkdir -p ${PLEXCONFLINK}
		/bin/ln -Ffhs ${CWDIR}/conf ${PLEXCONFLINK}/
		/usr/sbin/sysrc -f "${CWDIR}/conf/plex_config" GUI_ENABLE=YES >/dev/null 2>&1
		/bin/cp -R ${CWDIR}/gui/* /usr/local/www/ || error_notify "Error: A problem has occurred while copying extension files."
	fi
}

gui_disable()
{
	# Disable gui if -t option specified.
	if [ -d ${CWDIR}/gui ]; then
		/bin/rm -f /usr/local/www/plex-gui.php
		/bin/rm -Rf /usr/local/www/ext/plex-gui
		/bin/rm -f /usr/local/share/locale-plex
		/bin/rm -Rf ${PLEXCONFLINK}
		/usr/sbin/sysrc -f "${CWDIR}/conf/plex_config" GUI_ENABLE=NO >/dev/null 2>&1
	fi

	# Remove empty ext folder to prevent empty "Extensions" tab.
	if [ -d "/usr/local/www/ext" ]; then
		if [ ! "$(ls -A /usr/local/www/ext)" ]; then
			/bin/rm -R /usr/local/www/ext
		fi
	fi
}

plex_usergroup()
{
	# Check and create plex user/group.
	if ! /usr/sbin/pw groupshow plex >/dev/null 2>&1; then
		/usr/sbin/pw groupadd plex -g 972 >/dev/null 2>&1
	fi
	if ! /usr/sbin/pw usershow plex >/dev/null 2>&1; then
		/usr/sbin/pw useradd plex -u 972 -g 972  -c "Plex Media Server" -d /nonexistent -s /usr/sbin/nologin >/dev/null 2>&1
	fi
}

pkg_symlinkdir()
{
	# Rename old directories and maintain compatibility.
	if [ -d ${CWDIR}/system/pkg/pkgcache ]; then
		/bin/mv -f ${CWDIR}/system/pkg/pkgcache ${CWDIR}/system/pkg/cache
	fi
	if [ -d ${CWDIR}/system/pkg/pkgdb ]; then
		/bin/mv -f ${CWDIR}/system/pkg/pkgdb ${CWDIR}/system/pkg/db
	fi

	# Check and create/relink required symlinks/dirs for package cache and db.
	if [ -d "${PKGCACHE}" ]; then
		/bin/rm -R ${PKGCACHE}
		/bin/mkdir -p ${CWDIR}/system/pkg/cache
		/bin/ln -Ffhs ${CWDIR}/system/pkg/cache ${PKGCACHE}
	else
		/bin/mkdir -m 0755 -p /var/cache
		/bin/mkdir -p ${CWDIR}/system/pkg/cache
		/bin/ln -Ffhs ${CWDIR}/system/pkg/cache ${PKGCACHE}
	fi
	if [ -d "${PKGDB}" ]; then
		/bin/rm -R ${PKGDB}
		/bin/mkdir -p ${CWDIR}/system/pkg/db
		/bin/ln -Ffhs ${CWDIR}/system/pkg/db ${PKGDB}
	else
		/bin/mkdir -p ${CWDIR}/system/pkg/db
		/bin/ln -Ffhs ${CWDIR}/system/pkg/db ${PKGDB}
	fi
}

compat_symlinkdir()
{
	# Rename old directories and maintain compatibility.
	if [ -d ${CWDIR}/system/compat9x ]; then
		/bin/mv -f ${CWDIR}/system/compat9x ${CWDIR}/system/compat
	fi

	# Check and create/relink required symlinks/dirs for compat libs.
	if [ ! -d "${COMPATPATH1}" ]; then
		/bin/mkdir -m 0755 -p /usr/local/lib
		/bin/mkdir -p ${CWDIR}/system/compat/lib/compat
		/bin/ln -Ffhs ${CWDIR}/system/compat/lib/compat ${COMPATPATH1}
	fi
	if [ ! -d "${COMPATPATH2}" ]; then
		/bin/mkdir -m 0755 -p /usr/local/lib32
		/bin/mkdir -p ${CWDIR}/system/compat/lib32/compat
		/bin/ln -Ffhs ${CWDIR}/system/compat/lib32/compat ${COMPATPATH2}
	fi
	if [ ! -d "${COMPATPATH3}" ]; then
		/bin/mkdir -m 0755 -p /usr/local/libdata
		/bin/mkdir -p ${CWDIR}/system/compat/libdata/ldconfig
		/bin/ln -Ffhs ${CWDIR}/system/compat/libdata/ldconfig ${COMPATPATH3}
	fi
	if [ ! -d "${COMPATPATH4}" ]; then
		/bin/mkdir -m 0755 -p /usr/local/libdata
		/bin/mkdir -p ${CWDIR}/system/compat/libdata/ldconfig32
		/bin/ln -Ffhs ${CWDIR}/system/compat/libdata/ldconfig32 ${COMPATPATH4}
	fi
}

plex_symlinkdir()
{
	# Check and create/relink required symlinks/dirs for plexmediaserver.
	if [ ! -d "${RCDPATH}" ]; then
		/bin/mkdir -m 0755 -p ${RCDPATH}
	fi
	if [ -d "${CWDIR}/${PRDNAME}" ]; then
		/bin/mv ${CWDIR}/${PRDNAME} ${CWDIR}/system/${PRDNAME}
	fi
	if [ ! -d "${PLEXPATH}" ]; then
		/bin/mkdir -p ${CWDIR}/system/${PRDNAME}
		/bin/ln -Ffhs ${CWDIR}/system/${PRDNAME} /usr/local/share
	fi
	if [ ! -d ${CWDIR}/system/rc.d ]; then
		/bin/mkdir -p ${CWDIR}/system/rc.d
	fi
}

plex_rcd_link()
{
	# Restore current plex rcd if embedded.
	if [ "${PRDPLATFORM}" == "x64-embedded" ]; then
		if [ -f ${CWDIR}/system/rc.d/${CMDNAME} ]; then
			/bin/cp ${CWDIR}/system/rc.d/${CMDNAME} ${RCDPATH} || error_notify "Error: A problem has occurred while copying rcd file."
		fi
	fi
}

ext_enable_disable()
{
	# Start plex extension gui if enabled otherwise start plex cli version.
	if [ -d ${CWDIR}/gui ]; then
		GUI_STATUS=`cat ${CWDIR}/conf/plex_config | grep 'GUI_ENABLE=' | cut -d'"' -f2`
		if [ "${GUI_STATUS}" == "YES" ]; then
			PLEX_STATUS=`cat ${CWDIR}/conf/plex_config | grep 'PLEX_ENABLE=' | cut -d'"' -f2`
			if [ "${PLEX_STATUS}" == "NO" ]; then
				exit
			fi
		else
			break
		fi
	fi
}

plex_rcparamstart()
{
	# Plex Media Server rc parameters.
	if ! /bin/cat "/etc/rc.conf" | grep -q "${CMDNAME}_enable=\"NO\""; then
		/usr/sbin/sysrc ${CMDNAME}_enable="NO" >/dev/null 2>&1
	fi
	if ! /bin/cat "/etc/rc.conf" | grep -q "${CMDNAME}_support_path=\"${SUPPORTPATH}\""; then
		/usr/sbin/sysrc ${CMDNAME}_support_path="${SUPPORTPATH}" >/dev/null 2>&1
	fi
	if ! /bin/cat "/etc/rc.conf" | grep -q "${CMDNAME}_maxplugins=\"6\""; then
		/usr/sbin/sysrc ${CMDNAME}_maxplugins="6" >/dev/null 2>&1
	fi

	# Start Plex Media Server.
	if ! /bin/ps -acx | grep -q "Plex \Media \Server"; then
		service ${CMDNAME} onestart 2> /dev/null || ${PLEXRCD} onestart
	fi
	# Logg on startup success.
	if [ $? -eq 0 ]; then
		/usr/bin/logger "${SCRIPTNAME}: script has been started successfully"
	fi
}

plex_init()
{
	# Check for system compatibility.
	if [ ! "${PLATFORM}" == "amd64" ]; then
		echo "Unsupported platform!"; exit 1
	fi 
	# Check for product compatibility.
	if [ ! "${PRDVERSION}" -ge "103" ]; then
		echo "Unsupported version!"; exit 1
	fi

	# Link plexinit to /usr/local/sbin.
	if [ ! -f "/usr/local/sbin/plexinit" ]; then
		/bin/ln -fs ${CWDIR}/plexinit /usr/local/sbin
	fi

	# Function calls.
	platform_check
	ext_initial_download
	plex_initial_download
	plex_usergroup
	product_check
	ext_enable_disable
	plex_rcparamstart
}

# Plexinit common control switches.
while getopts ":otgsprvuh" option; do
	case ${option} in
		[h]) echo "Usage: ${SCRIPTNAME} -[option]";
		echo "Options:"
		echo "		-s  Start Plex Media Server."
		echo "		-p  Stop Plex Media Server."
		echo "		-r  Restart Plex Media Server."
		echo "		-v  Display product version."
		echo "		-u  Upgrade Plex/Extension packages."
		echo "		-g  Enables the addon GUI."
		echo "		-t  Disable the addon GUI."
		echo "		-h  Display this help message."; exit 0 ;;
		[o]) OBI_INSTALL="ON";; # To prevent nested PHP-CGI call for installation with OBI.
		[g]) gui_enable; exit 0 ;; # For enable the addon gui.
		[t]) gui_disable; exit 0 ;; # For disable the addon gui.
		[s]) service ${CMDNAME} onestart 2> /dev/null || ${PLEXRCD} onestart; exit 0 ;;
		[p]) service ${CMDNAME} onestop 2> /dev/null || ${PLEXRCD} onestop && /bin/rm -f ${PLEXPID};  exit 0 ;;
		[r]) service ${CMDNAME} onerestart 2> /dev/null || ${PLEXRCD} onerestart; exit 0 ;;
		[v]) echo "${APPNAME} ${APPVERSION}"; pkg info -I ${PRDNAME}; exit 0 ;;
		[u]) pkg_upgrade; exit 0 ;;
		[?]) echo "Invalid option, -h for usage."; exit 1 ;;
	esac
done

plex_init
