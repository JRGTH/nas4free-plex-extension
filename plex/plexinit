#!/bin/sh
# plexinit.sh
# Created by: J.M Rivera (http://forums.nas4free.org/viewtopic.php?f=71&t=11049)
# Provide: Plex Media Server*
# Require: NAS4Free 10.x and later version.
# *Plex(c) (Plex Media Server) is a registered trademark of Plex(c), Inc.

# Determine current working directory as absolute path.
CWDIR=$(dirname $(realpath $0))

# Global variables.
PLATFORM=`uname -p`
PRODUCT=`uname -i`
PRDVERSION=`uname -r | cut -d. -f1`
PRDPLATFORM=`cat /etc/platform`
SCRIPTNAME=`basename $0`
APPVERSION=`cat ${CWDIR}/version 2> /dev/null`
UNIONFS=`mount -t unionfs | grep "above" | grep -q "/usr/local"; echo $?`
APPNAME="Plex Extension"
PKGCACHE="/var/cache/pkg"
PKGMETA="/var/db/pkg"
PLEXCONFDIR="/var/etc/plexconf"
COMPATPATH1="/usr/local/lib/compat"
COMPATPATH2="/usr/local/lib32/compat"
COMPATPATH3="/usr/local/libdata/ldconfig"
COMPATPATH4="/usr/local/libdata/ldconfig32"
PLEXPATH="/usr/local/share/plexmediaserver"
PLEXRCD="/usr/local/etc/rc.d/plexmediaserver"
PLEXPID="/var/run/plex/plex.pid"
SUPPORTPATH="${CWDIR}/plexdata"
RCDPATH="/usr/local/etc/rc.d"
CONFIG="/cf/conf/config.xml"
PRDNAME="plexmediaserver"
CMDNAME="plexmediaserver"

error_notify()
{
	# Logg and notify message on error and exit.
	/usr/bin/logger "${SCRIPTNAME}: an error has occurred during initialize"
	echo -e "$*" >&2 ; exit 1
}

update_freebsdconf()
{
	# Replace old FreeBSD.conf to fetch latest packages.
	if [ -f /etc/pkg/FreeBSD.conf ]; then 
		if /bin/cat "/etc/pkg/FreeBSD.conf" | grep -q "quarterly"; then
			/usr/bin/sed -e "s=quarterly=latest=" /etc/pkg/FreeBSD.conf > /etc/pkg/FreeBSD.conf~
			/bin/mv /etc/pkg/FreeBSD.conf~ /etc/pkg/FreeBSD.conf || error_notify "Error: A problem has occurred while renaming conf file."
		fi
	fi
}

plex_initial_download()
{
	# Update FreeBSD.conf file.
	update_freebsdconf

	# Check if Plex already exist.
	if [ ! -f ${PLEXPATH}/Plex_Media_Server ]; then
		# Fetch and install latest plex package.
		pkg install -y ${PRDNAME}
	fi

	# Backup latest plex rcd after install if embedded.
	if [ ${PRDPLATFORM} == "x64-embedded" ]; then
		# Check if the system is running unionfs for /usr/local(above).
		if  [ ${UNIONFS} -eq 1 ]; then
			if [ -f ${PLEXRCD} ]; then
				/bin/cp ${PLEXRCD} ${CWDIR}/system/rc.d || error_notify "Error: A problem has occurred while copying rcd file."
			fi
		fi
	fi
}

pkg_upgrade()
{
	# Update FreeBSD.conf file.
	update_freebsdconf

	# Set plex current version variable.
	PLEXVERSION=`pkg info -I plexmediaserver | cut -d' ' -f1 | cut -d- -f2 | tr -d .`

	# Check for latest plex packages for upgrade.
	pkg upgrade -y ${PRDNAME}

	# Set plex new version variable.
	PLEXNEWVERSION=`pkg info -I plexmediaserver | cut -d' ' -f1 | cut -d- -f2 | tr -d .`

	# Restart plex if version upgraded.
	if [ ${PLEXNEWVERSION} -gt ${PLEXVERSION} ]; then
		service ${CMDNAME} onerestart 2> /dev/null || ${PLEXRCD} onerestart
	fi

	# Backup latest plex rcd after upgrade if embedded.
	if [ ${PRDPLATFORM} == "x64-embedded" ]; then
		# Check if the system is running unionfs for /usr/local(above).
		if  [ ${UNIONFS} -eq 1 ]; then
			if [ -f ${PLEXRCD} ]; then
				/bin/cp ${PLEXRCD} ${CWDIR}/system/rc.d || error_notify "Error: A problem has occurred while copying rcd file."
			fi
		fi
	fi

	# Check and upgrade extension package.
	if [ -f ${CWDIR}/version ]; then
		extenstion_upgrade
	else
		ext_initial_download
	fi
}

extenstion_upgrade()
{
	# Create temporary folder for the upgrade process.
	/bin/mkdir -p ${CWDIR}/update
	/usr/bin/fetch -q -o ${CWDIR}/update https://raw.githubusercontent.com/JRGTH/nas4free-plex-extension/master/plex/version || error_notify "Error: A problem has occurred while fetching version file."

	# Compare version files and fetch latest package if available.
	if [ -f ${CWDIR}/update/version ]; then
		UPDATEVER=`cat ${CWDIR}/update/version | tr -d .`
		CURRENTVER=`cat ${CWDIR}/version | tr -d .`
		if [ ${UPDATEVER} -gt ${CURRENTVER} ]; then
			/usr/bin/fetch -q -o ${CWDIR}/update https://github.com/JRGTH/nas4free-plex-extension/archive/master.zip || error_notify "Error: A problem has occurred while fetching extension package."
			/usr/bin/tar -xf ${CWDIR}/update/master.zip --exclude='.git*' --strip-components 1 -C ${CWDIR}/update
			/bin/chmod +x ${CWDIR}/update/plex/plexinit
			/bin/cp -rf ${CWDIR}/update/plex/* ${CWDIR}/

			# If gui enable then copy new gui files.
			GUI_STATUS=`cat ${CWDIR}/conf/plex_config | grep 'GUI_ENABLE=' | cut -d'"' -f2`
			if [ "${GUI_STATUS}" == "YES" ]; then
				/bin/cp -r ${CWDIR}/gui/* /usr/local/www/ || error_notify "Error: A problem has occurred while copying extension files."
			fi
			# Perform cleanup.
			/bin/rm -r ${CWDIR}/update
		else
			# Perform cleanup.
			/bin/rm -r ${CWDIR}/update
		fi
	fi
}

ext_initial_download()
{
	# Always ensure the version file is present, otherwise update the extension files on startup.
	if [ ! -f ${CWDIR}/version ]; then
		/bin/mkdir -p ${CWDIR}/update
		/usr/bin/fetch -q -o ${CWDIR}/update https://github.com/JRGTH/nas4free-plex-extension/archive/master.zip || error_notify "Error: A problem has occurred while fetching extension package."
		/usr/bin/tar -xf ${CWDIR}/update/master.zip --exclude='.git*' --strip-components 1 -C ${CWDIR}/update
		/bin/chmod +x ${CWDIR}/update/plex/plexinit
		/bin/cp -rf ${CWDIR}/update/plex/* ${CWDIR}/
		/bin/rm -r ${CWDIR}/update
	fi
}

product_check()
{
	# Check for working product.
	if [ ${PRODUCT} == "NAS4FREE-x64" ]; then
		postinit_cmd
		gui_start
	fi
}

platform_check()
{
	# Check for working platform.
	if [ ${PRDPLATFORM} == "x64-embedded" ] \
		|| [ ${PRDPLATFORM} == "x64-liveCD" ] \
			|| [ ${PRDPLATFORM} == "x64-liveUSB" ]; then
		# Check if the system is running unionfs for /usr/local(above).
		if  [ ${UNIONFS} -eq 1 ]; then
			pkg_symlinkdir
			compat_symlinkdir
			plex_symlinkdir
			plex_rcd_link
		fi
	fi
}

postinit_cmd()
{
	# Check and generate temporary php script for plexinit postinit command.
	if ! /usr/bin/grep -q ${CWDIR}/plexinit ${CONFIG}; then
		/usr/bin/touch ${CWDIR}/postinit || error_notify "Error: A problem has occurred while creating postinit file."
		/bin/chmod +x ${CWDIR}/postinit
		if [ ! ${PRDVERSION} -ge "11" ]; then
			# Generate php script tor NAS4Free 10.x versions.
			/bin/cat << EOF > ${CWDIR}/postinit
<?php
require_once("config.inc");
require_once("functions.inc");
\$cmd = dirname(__FILE__)."/plexinit";
	\$i =0;
	if ( is_array(\$config['rc']['postinit'] ) && is_array( \$config['rc']['postinit']['cmd'] ) ) {
		for (\$i; \$i < count(\$config['rc']['postinit']['cmd']);) {
			if (preg_match('/plexinit/', \$config['rc']['postinit']['cmd'][\$i])) break; ++\$i; }
	}
	\$config['rc']['postinit']['cmd'][\$i] = \$config['cmd']."\$cmd";
	write_config();
?>
EOF
		else
			# Generate php script tor NAS4Free 11.x versions.
			/bin/cat << EOF > ${CWDIR}/postinit
<?php
require_once("config.inc");
require_once("functions.inc");
\$cmd = dirname(__FILE__)."/plexinit";
\$name = "Plex Extension";
\$comment = "Plex Media Server";
	if (isset(\$config['rc']['param'])) {
		\$add_rc_for_plex = (false === array_search_ex(\$name, \$config['rc']['param'], 'value'));
	} else {
	\$add_rc_for_plex = true;
	}
	if(\$add_rc_for_plex) {
		\$r_param = [];
		\$r_param['uuid'] = uuid();
		\$r_param['name'] = \$name;
		\$r_param['value'] = \$cmd;
		\$r_param['comment'] = \$comment;
		\$r_param['typeid'] = '2';
		\$r_param['enable'] = true;
		\$config['rc']['param'][] = \$r_param;
		write_config();
	}
?>
EOF
		fi

		# Execute temporary php script.
		if [ "${OBI_INSTALL}" != "ON" ]; then
			/usr/local/bin/php-cgi -f ${CWDIR}/postinit && rm ${CWDIR}/postinit
			# To set enable for the GUI because at the installation Plex is started by default.
			/bin/mkdir -p ${CWDIR}/conf
			/usr/sbin/sysrc -f "${CWDIR}/conf/plex_config" PLEX_ENABLE=YES GUI_ENABLE=YES >/dev/null 2>&1
		else 
			# To set enable for the GUI because at the installation Plex is started by default.
			/bin/mkdir -p ${CWDIR}/conf
			/usr/sbin/sysrc -f "${CWDIR}/conf/plex_config" PLEX_ENABLE=YES GUI_ENABLE=YES >/dev/null 2>&1
		fi
	fi
}

gui_start()
{
	# Initialize the extension GUI.
	if [ -d ${CWDIR}/gui ]; then
		# Always ensure the config directory/file exist.
		if [ ! -f ${CWDIR}/conf/plex_config ]; then
			# Restore default configuration.
			/bin/mkdir -p ${CWDIR}/conf
			/usr/sbin/sysrc -f "${CWDIR}/conf/plex_config" PLEX_ENABLE=YES GUI_ENABLE=YES >/dev/null 2>&1
		fi
		GUI_STATUS=`cat ${CWDIR}/conf/plex_config | grep 'GUI_ENABLE=' | cut -d'"' -f2`
		if [ "${GUI_STATUS}" == "YES" ]; then
			# Store the installation path and link conf.
			/usr/sbin/sysrc -f "${CWDIR}/conf/plex_config" INSTALL_DIR=${CWDIR} >/dev/null 2>&1
			/bin/mkdir -p ${PLEXCONFDIR}
			/bin/ln -Ffhs ${CWDIR}/conf ${PLEXCONFDIR}/
			# Copy the GUI files.
			/bin/cp -r ${CWDIR}/gui/* /usr/local/www/ || error_notify "Error: A problem has occurred while copying extension files."
		fi
	fi
}

gui_enable()
{
	#  Relink conf and copy the GUI files.
	if [ -d ${CWDIR}/gui ]; then
		/bin/mkdir -p ${PLEXCONFDIR}
		/bin/ln -Ffhs ${CWDIR}/conf ${PLEXCONFDIR}/
		/usr/sbin/sysrc -f "${CWDIR}/conf/plex_config" GUI_ENABLE=YES >/dev/null 2>&1
		/bin/cp -r ${CWDIR}/gui/* /usr/local/www/ || error_notify "Error: A problem has occurred while copying extension files."
	fi
}

gui_disable()
{
	# Disable GUI if -t option specified.
	if [ -d ${CWDIR}/gui ]; then
		/bin/rm -f /usr/local/www/plex-gui.php
		/bin/rm -rf /usr/local/www/ext/plex-gui
		/bin/rm -f /usr/local/share/locale-plex
		/bin/rm -rf ${PLEXCONFDIR}
		/usr/sbin/sysrc -f "${CWDIR}/conf/plex_config" GUI_ENABLE=NO >/dev/null 2>&1
	fi

	# Remove empty ext folder to prevent null "Extensions" tab.
	if [ -d "/usr/local/www/ext" ]; then
		if [ ! "$(ls -A /usr/local/www/ext)" ]; then
			/bin/rm -r /usr/local/www/ext
		fi
	fi
}

plex_usergroup()
{
	# Check and create plex user/group.
	if ! /usr/sbin/pw groupshow plex >/dev/null 2>&1; then
		/usr/sbin/pw groupadd plex -g 972 >/dev/null 2>&1
	fi
	if ! /usr/sbin/pw usershow plex >/dev/null 2>&1; then
		/usr/sbin/pw useradd plex -u 972 -g 972  -c "Plex Media Server" -d /nonexistent -s /usr/sbin/nologin >/dev/null 2>&1
	fi
}

pkg_symlinkdir()
{
	# Check and create/relink required symlinks/dirs for package cache and metadata.
	if [ -d ${PKGCACHE} ]; then
		/bin/rm -r ${PKGCACHE}
		/bin/mkdir -p ${CWDIR}/system/pkg/pkgcache
		/bin/ln -Ffhs ${CWDIR}/system/pkg/pkgcache ${PKGCACHE}
	else
		/bin/mkdir -m 0755 -p /var/cache
		/bin/mkdir -p ${CWDIR}/system/pkg/pkgcache
		/bin/ln -Ffhs ${CWDIR}/system/pkg/pkgcache ${PKGCACHE}
	fi
	if [ -d ${PKGMETA} ]; then
		/bin/rm -r ${PKGMETA}
		/bin/mkdir -p ${CWDIR}/system/pkg/pkgmeta
		/bin/ln -Ffhs ${CWDIR}/system/pkg/pkgmeta ${PKGMETA}
	else
		/bin/mkdir -p ${CWDIR}/system/pkg/pkgmeta
		/bin/ln -Ffhs ${CWDIR}/system/pkg/pkgmeta ${PKGMETA}
	fi
}

compat_symlinkdir()
{
	# Name the old compat9x directory to compat.
	COMPATDIR="compat9x"
	if [ ! -d ${CWDIR}/system/${COMPATDIR} ]; then
		if [ ${PRDVERSION} -ge "11" ]; then
			COMPATDIR="compat"
		fi
	fi

	# Check and create/relink required symlinks/dirs for compat libs.
	if [ ! -d ${COMPATPATH1} ]; then
		/bin/mkdir -m 0755 -p /usr/local/lib
		/bin/mkdir -p ${CWDIR}/system/${COMPATDIR}/lib/compat
		/bin/ln -Ffhs ${CWDIR}/system/${COMPATDIR}/lib/compat ${COMPATPATH1}
	fi
	if [ ! -d ${COMPATPATH2} ]; then
		/bin/mkdir -m 0755 -p /usr/local/lib32
		/bin/mkdir -p ${CWDIR}/system/${COMPATDIR}/lib32/compat
		/bin/ln -Ffhs ${CWDIR}/system/${COMPATDIR}/lib32/compat ${COMPATPATH2}
	fi
	if [ ! -d ${COMPATPATH3} ]; then
		/bin/mkdir -m 0755 -p /usr/local/libdata
		/bin/mkdir -p ${CWDIR}/system/${COMPATDIR}/libdata/ldconfig
		/bin/ln -Ffhs ${CWDIR}/system/${COMPATDIR}/libdata/ldconfig ${COMPATPATH3}
	fi
	if [ ! -d ${COMPATPATH4} ]; then
		/bin/mkdir -m 0755 -p /usr/local/libdata
		/bin/mkdir -p ${CWDIR}/system/${COMPATDIR}/libdata/ldconfig32
		/bin/ln -Ffhs ${CWDIR}/system/${COMPATDIR}/libdata/ldconfig32 ${COMPATPATH4}
	fi
}

plex_symlinkdir()
{
	# Check and create/relink required symlinks/dirs for plexmediaserver.
	if [ ! -d ${RCDPATH} ]; then
		/bin/mkdir -m 0755 -p ${RCDPATH}
	fi
	if [ -d ${CWDIR}/${PRDNAME} ]; then
		/bin/mv ${CWDIR}/${PRDNAME} ${CWDIR}/system/${PRDNAME}
	fi
	if [ ! -d ${PLEXPATH} ]; then
		/bin/mkdir -p ${CWDIR}/system/${PRDNAME}
		/bin/ln -Ffhs ${CWDIR}/system/${PRDNAME} /usr/local/share
	fi
	if [ ! -d ${CWDIR}/system/rc.d ]; then
		/bin/mkdir -p ${CWDIR}/system/rc.d
	fi
}

plex_rcd_link()
{
	# Restore current plex rcd if embedded.
	if [ ${PRDPLATFORM} == "x64-embedded" ]; then
		# Check if the system is running unionfs for /usr/local(above).
		if  [ ${UNIONFS} -eq 1 ]; then
			if [ -f ${CWDIR}/system/rc.d/${CMDNAME} ]; then
				/bin/cp ${CWDIR}/system/rc.d/${CMDNAME} ${RCDPATH} || error_notify "Error: A problem has occurred while copying rcd file."
			fi
		fi
	fi
}

ext_enable_disable()
{
	# Start plex extension gui if enabled otherwise start plex cli version.
	if [ -d ${CWDIR}/gui ]; then
		GUI_STATUS=`cat ${CWDIR}/conf/plex_config | grep 'GUI_ENABLE=' | cut -d'"' -f2`
		if [ "${GUI_STATUS}" == "YES" ]; then
			PLEX_STATUS=`cat ${CWDIR}/conf/plex_config | grep 'PLEX_ENABLE=' | cut -d'"' -f2`
			if [ "${PLEX_STATUS}" == "NO" ]; then
				exit
			fi
		else
			break
		fi
	fi
}

plex_rcparamstart()
{
	# Plex Media Server rc parameters.
	if ! /bin/cat "/etc/rc.conf" | grep -q "${CMDNAME}_enable=\"NO\""; then
		/usr/sbin/sysrc ${CMDNAME}_enable="NO" >/dev/null 2>&1
	fi
	if ! /bin/cat "/etc/rc.conf" | grep -q "${CMDNAME}_support_path=\"${SUPPORTPATH}\""; then
		/usr/sbin/sysrc ${CMDNAME}_support_path="${SUPPORTPATH}" >/dev/null 2>&1
	fi
	if ! /bin/cat "/etc/rc.conf" | grep -q "${CMDNAME}_maxplugins=\"6\""; then
		/usr/sbin/sysrc ${CMDNAME}_maxplugins="6" >/dev/null 2>&1
	fi

	# Start Plex Media Server.
	if ! /bin/ps -acx | grep -q "Plex \Media \Server"; then
		service ${CMDNAME} onestart 2> /dev/null || ${PLEXRCD} onestart
	fi
	# Logg on startup success.
	if [ $? -eq 0 ]; then
		/usr/bin/logger "${SCRIPTNAME}: script has been started successfully"
	fi
}

plex_init()
{
	# Check for system compatibility.
	if [ ! ${PLATFORM} == "amd64" ]; then
		echo "Unsupported platform!"; exit 1
	fi 
	# Check for product compatibility.
	if [ ! ${PRDVERSION} -ge "10" ]; then
		echo "Unsupported version!"; exit 1
	fi

	# Link plexinit to /usr/local/sbin.
	if [ ! -f "/usr/local/sbin/plexinit" ]; then
		/bin/ln -fs ${CWDIR}/plexinit /usr/local/sbin
	fi

	# Function calls.
	platform_check
	ext_initial_download
	plex_initial_download
	plex_usergroup
	product_check
	ext_enable_disable
	plex_rcparamstart
}

# Plexinit common control switches.
while getopts ":otgsprvuh" option; do
	case ${option} in
		[h]) echo "Usage: ${SCRIPTNAME} -[option]";
		echo "Options:"
		echo "		-s  Start Plex Media Server."
		echo "		-p  Stop Plex Media Server."
		echo "		-r  Restart Plex Media Server."
		echo "		-v  Display product version."
		echo "		-u  Upgrade Plex/Extension packages."
		echo "		-g  Enables the addon GUI."
		echo "		-t  Disable the addon GUI."
		echo "		-h  Display this help message."; exit 0 ;;
		[o]) OBI_INSTALL="ON";; # To prevent nested PHP-CGI call for installation with OBI.
		[g]) gui_enable; exit 0 ;; # For enable the addon gui.
		[t]) gui_disable; exit 0 ;; # For disable the addon gui.
		[s]) service ${CMDNAME} onestart 2> /dev/null || ${PLEXRCD} onestart; exit 0 ;;
		[p]) service ${CMDNAME} onestop 2> /dev/null || ${PLEXRCD} onestop && /bin/rm -f ${PLEXPID};  exit 0 ;;
		[r]) service ${CMDNAME} onerestart 2> /dev/null || ${PLEXRCD} onerestart; exit 0 ;;
		[v]) echo "${APPNAME} ${APPVERSION}"; pkg info -I ${PRDNAME}; exit 0 ;;
		[u]) pkg_upgrade; exit 0 ;;
		[?]) echo "Invalid option, -h for usage."; exit 1 ;;
	esac
done

plex_init
